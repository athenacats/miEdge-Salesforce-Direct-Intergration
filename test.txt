import streamlit as st
import pandas as pd
import re
import requests
from simple_salesforce import Salesforce

# =======================
# Salesforce OAuth2 Hardcoded Details
# =======================
CLIENT_ID = '3MVG9XgkMlifdwVDNiBseXcFdjN4oTKy4TKQBAjqSOFWmC96FNUze2H0Jnbp1uUwTX9UhEsFxVybQFzacnyuA'  # Replace with your Salesforce Client Secret
CLIENT_SECRET = '9B4E30BDDD1EEAD2D4074AE0AFF426C9EBF7AA0270858ECC503252E4E3781942'
USERNAME = 'esther@diqseo.com'  # Your Salesforce username
PASSWORD = 'D&35xXK&D7gQ#gha'  # Your Salesforce password
SECURITY_TOKEN = 'g1L3pxukojx4qxyO808DlhQJ'  # Your Salesforce security token

# Salesforce Token URL
TOKEN_URL = 'https://login.salesforce.com/services/oauth2/token'

# =======================
# Helper Function to Authenticate Using Username-Password Flow
# =======================
def hardcoded_salesforce_auth():
    data = {
        'grant_type': 'password',
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'username': USERNAME,
        'password': f"{PASSWORD}{SECURITY_TOKEN}"
    }

    print(data)

    response = requests.post(TOKEN_URL, data=data)
    if response.status_code == 200:
        token_data = response.json()
        st.success("‚úÖ Successfully authenticated with Salesforce!")
        return Salesforce(instance_url=token_data['instance_url'], session_id=token_data['access_token'])
    else:
        st.error(f"‚ùå Salesforce Authentication Failed: {response.text}")
        return None

# =======================
# Helper Function to Detect C-Level Titles
# =======================
def is_executive_title(title):
    patterns = [
        r'\bCEO\b', r'\bCFO\b', r'\bCTO\b', r'\bCIO\b', r'\bCOO\b', r'\bCMO\b', r'\bCHRO\b', r'\bCLO\b', r'\bCPO\b', r'\bCRO\b',
        r'\bVice President\b', r'\bVP\b', r'\bV\.P\.\b',
        r'\bManaging Director\b', r'\bDirector\b', r'\bSenior Director\b', r'\bExecutive Director\b',
        r'\bSenior\b', r'\bSr\.\b', r'\bPrincipal\b', r'\bLead\b', r'\bHead\b', r'\bChief\b',
        r'\bPresident\b', r'\bPartner\b', r'\bOwner\b', r'\bFounder\b', r'\bChairman\b', r'\bExecutive\b', r'\bLeader\b',
        r'\bManager\b', r'\bExecutive\b', r'\bMD\b'
    ]

    exclusion_patterns = [
        r'\bHR\b', r'\bHuman Resources\b'
    ]

    if any(re.search(pattern, str(title), re.IGNORECASE) for pattern in patterns):
        if not any(re.search(excl_pattern, str(title), re.IGNORECASE) for excl_pattern in exclusion_patterns):
            return True

    return False

# =======================
# Function to Push Data to Salesforce
# =======================
def push_to_salesforce(sf_instance, df, selected_object):
    success_count = 0
    for _, row in df.iterrows():
        data = {
            'FirstName': row.get('contact_first_name', ''),
            'LastName': row.get('contact_last_name', ''),
            'Company': row.get('company_name', ''),
            'Email': row.get('email', ''),
            'Phone': row.get('phone', ''),
            'Title': row.get('job_title', ''),
            'LeadSource': 'Streamlit App'
        }
        try:
            sf_instance.__getattr__(selected_object).create(data)
            success_count += 1
        except Exception as e:
            st.error(f"Error uploading record: {e}")

    st.success(f"‚úÖ Successfully pushed {success_count} records to Salesforce!")

# =======================
# Main Streamlit App
# =======================
def main():
    st.title("üìã ESI-miEdge Job Title Scrubber with Salesforce Integration (Hardcoded OAuth)")
    st.write("Upload your **Excel/CSV** file, auto-select **executive roles**, and push to **Salesforce**.")

    # Step 1: Upload File
    uploaded_file = st.file_uploader("üì§ Upload Excel/CSV File", type=["csv", "xlsx"])

    if uploaded_file is not None:
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)

        st.success("‚úÖ File Uploaded Successfully!")

        # Display Raw Data
        with st.expander("üîç View Raw Data"):
            st.dataframe(df)

        # Step 2: Extract and Filter Job Titles
        if 'Job Title' in df.columns:
            unique_job_titles = df['Job Title'].dropna().unique().tolist()
            preselected_titles = [title for title in unique_job_titles if is_executive_title(title)]
            st.write(f"### üõ† Select Job Titles to Keep ({len(unique_job_titles)} found):")

            selected_titles = st.multiselect(
                "‚úÖ Pre-selected C-Level and Executive Titles (Adjust as Needed):",
                unique_job_titles,
                default=preselected_titles
            )

            filtered_df = df[df['Job Title'].isin(selected_titles)]

            st.write(f"### ‚úÖ Filtered Data (Showing {len(filtered_df)} of {len(df)} rows):")
            st.dataframe(filtered_df)

            # Download Filtered Data
            def convert_df_to_csv(df):
                return df.to_csv(index=False).encode('utf-8')

            csv_data = convert_df_to_csv(filtered_df)
            st.download_button(
                label="üì• Download Filtered Data as CSV",
                data=csv_data,
                file_name='filtered_executive_data.csv',
                mime='text/csv'
            )

            # Salesforce Authentication and Data Push
            if st.button("üöÄ Authenticate & Push to Salesforce"):
                sf = hardcoded_salesforce_auth()
                if sf:
                    selected_object = st.selectbox("üìÅ Select Salesforce Object to Push Data:", ['Lead', 'Contact', 'Account'])
                    push_to_salesforce(sf, filtered_df, selected_object)
        else:
            st.error("‚ùå The uploaded file does not contain a 'Job Title' column.")

if __name__ == "__main__":
    main()
